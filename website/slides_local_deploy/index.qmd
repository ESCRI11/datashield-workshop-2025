---
title: "DataSHIELD Local Deployment"
subtitle: "Docker Compose Setup"
format: 
  revealjs:
    theme: default
    slide-number: true
    chalkboard: true
    preview-links: auto
    css: styles.css
---

## Overview

**Goal**: Deploy Opal locally using Docker Compose

**Why start local?**

- üöÄ **Low friction** - no DNS, firewalls, or cloud costs
- üîí **Safe sandbox** - HTTP only, no internet exposure  
- üë©‚Äçüíª **Developer-friendly** - iterate on DataSHIELD packages
- üì¶ **Portable** - same foundation scales to production
- üéì **Teaching aid** - contained lab environment

---

## Architecture Overview

```{mermaid}
graph LR
  B["Browser<br/>http://localhost:8080"] -->|8080| O["Opal<br/>(8080)"]
  subgraph Docker["docker network: opalnet"]
    O -->|R/DataSHIELD| R["Rock<br/>(8085)"]
    O -->|Auxiliary| MONGO["MongoDB<br/>(27017)"]
  end
```

---

## Services & Roles

**Opal (OBiBa DataSHIELD Server)**
- Main DataSHIELD server and admin UI
- HTTP on 8080 (direct access)
- Configuration via environment variables

**Rock (R Server)**
- Executes R/DataSHIELD calls from Opal
- Reachable as `rock:8085` on Docker network
- Ships with DataSHIELD packages

**MongoDB (Auxiliary Store)**
- Used by Opal for auxiliary features
- Version 6.0 (per Opal compatibility requirements)

---

## File Structure

```
opal-local/
‚îú‚îÄ‚îÄ .env                    # Environment variables
‚îî‚îÄ‚îÄ docker-compose.yml     # Service definitions  
```

**Simple setup** - only 2 files needed!

---

## Step 1: Environment Variables

Create `.env` file with admin password:

```bash
OPAL_ADMINISTRATOR_PASSWORD=ChangeMe123!
```

- `OPAL_ADMINISTRATOR_PASSWORD`: Required on first start
- No database credentials needed (MongoDB only)

---

## Step 2: Docker Compose

```yaml
services:
  opal:
    image: obiba/opal:latest
    depends_on:
      - rock
      - mongo
    ports:
      - "8080:8080"
      - "8443:8443"
    environment:
      - OPAL_ADMINISTRATOR_PASSWORD=${OPAL_ADMINISTRATOR_PASSWORD}
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - ROCK_HOSTS=rock:8085
    volumes:
      - opal_srv:/srv
  mongo:
    image: mongo:6.0
    volumes:
      - mongo_data:/data/db

  rock:
    image: datashield/rock-base:latest
    environment:
    - ROCK_ID=new-stack-rock

volumes:
  opal_srv:
  mongo_data:

networks:
  opalnet:
```

---

## Step 3: Deploy the Stack

```bash
# Start all services
docker compose up -d

# Check status
docker compose ps

# Monitor Opal logs
docker compose logs -f opal
```

**First start**: May take a minute while images are pulled

**Access**: Open `http://localhost:8080` in your browser

**Login**: User `administrator` + password from `.env`

---

## Step 4: Test DataSHIELD Connection

```r
library(DSI)
library(DSOpal)
library(httr)
set_config(config(ssl_verifyhost = 0L, ssl_verifypeer = 0L))
library(dsBaseClient)

b <- DSI::newDSLoginBuilder()
b$append(
    server   = "local",
    url      = "http://localhost:8080",
    user     = "administrator",
    password = "ChangeMe123!",
    profile = "default"
)

logins <- b$build()
conns <- DSI::datashield.login(logins)
ds.ls()
```

**Note**: SSL verification disabled for local testing only!

---

## Key Configuration Points

**Environment Variables**
- `ROCK_HOSTS=rock:8085` ‚Üí R server connection
- `MONGO_HOST=mongo` ‚Üí MongoDB connection
- `OPAL_ADMINISTRATOR_PASSWORD` ‚Üí Admin access

**Network Setup**
- All services on `opalnet` Docker network
- Direct access to Opal on port 8080
- Internal service communication via Docker DNS

**Persistence**
- Named volumes preserve data across restarts
- Remove volumes to reset completely

---

## Troubleshooting

**Opal not reachable**
- Check if port 8080 is available locally
- Verify container is running: `docker compose ps`

**Login fails**
- Ensure `OPAL_ADMINISTRATOR_PASSWORD` set at first start
- Reset: stop containers, remove `opal_srv` volume, restart

**MongoDB issues**
- Use `mongo:6.0` (Opal compatibility requirement)

**Rock connection issues**
- Check that Rock container is running and healthy
- Verify `ROCK_HOSTS=rock:8085` configuration

---

## Next Steps

**For Production Deployment**
- Add Nginx reverse proxy with TLS
- Configure proper DNS
- Implement security hardening
- Set up monitoring and backups

**For Development**
- Install additional DataSHIELD packages in Rock
- Import datasets into Opal
- Test DataSHIELD analysis workflows
- Develop custom DataSHIELD functions

---

## Summary

‚úÖ **Achieved**: Local DataSHIELD stack with Docker Compose

‚úÖ **Benefits**: 
- Quick setup and iteration
- Safe development environment  
- Production-ready foundation
- Complete DataSHIELD functionality

‚úÖ **Ready for**: Package development, testing, and learning DataSHIELD

**Next session**: Going live with Nginx, TLS, and DNS!

