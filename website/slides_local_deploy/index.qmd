---
title: "DataSHIELD Local Deployment"
subtitle: "Docker Compose Setup with Nginx Reverse Proxy"
format: 
  revealjs:
    theme: default
    slide-number: true
    chalkboard: true
    preview-links: auto
    css: styles.css
---

## Overview

**Goal**: Deploy Opal locally using Docker Compose with self-signed TLS

**Why start local?**

- üöÄ **Low friction** - no DNS, firewalls, or cloud costs
- üîí **Safe sandbox** - self-signed TLS, no internet exposure  
- üë©‚Äçüíª **Developer-friendly** - iterate on DataSHIELD packages
- üì¶ **Portable** - same foundation scales to production
- üéì **Teaching aid** - contained lab environment

---

## Architecture Overview

```{mermaid}
graph LR
  B["Browser<br/>https://localhost"] -->|80/443| N["Nginx<br/>Reverse Proxy"]
  N -->|proxy https‚Üíhttp| O["Opal<br/>(8080)"]
  subgraph Docker["docker network: opalnet"]
    O -->|R/DataSHIELD| R["Rock<br/>(8085)"]
    O -->|Data storage| MSQL["MySQL<br/>(3306)"]
    O -->|Auxiliary| MONGO["MongoDB<br/>(27017)"]
  end
```

---

## Services & Roles

**Nginx (Reverse Proxy)**
- Terminates TLS with self-signed cert
- Handles 80‚Üí443 redirect
- Forwards client headers (`X-Forwarded-*`)

**Opal (OBiBa DataSHIELD Server)**
- Main DataSHIELD server and admin UI
- HTTP on 8080 inside Docker network
- Configuration via environment variables

---

## Services & Roles (cont.)

**Rock (R Server)**
- Executes R/DataSHIELD calls from Opal
- Reachable as `rock:8085` on Docker network
- Ships with DataSHIELD packages

**MySQL & MongoDB**
- MySQL: Opal's data store (persistent volume)
- MongoDB: Auxiliary features (‚â§ 6.0 per Opal docs)

---

## File Structure

```
opal-local/
‚îú‚îÄ‚îÄ .env                    # Environment variables
‚îú‚îÄ‚îÄ docker-compose.yml     # Service definitions  
‚îî‚îÄ‚îÄ nginx/
    ‚îú‚îÄ‚îÄ nginx.conf         # Reverse proxy config
    ‚îî‚îÄ‚îÄ certs/
        ‚îú‚îÄ‚îÄ localhost.crt  # Self-signed certificate
        ‚îú‚îÄ‚îÄ localhost.key  # Private key
        ‚îî‚îÄ‚îÄ dhparam.pem    # (optional) DH params
```

---

## Step 1: Environment Variables

Create `.env` file with secrets:

```bash
OPAL_ADMINISTRATOR_PASSWORD=ChangeMe123!
MYSQLDATA_DATABASE=opal_data
MYSQLDATA_USER=opal
MYSQLDATA_PASSWORD=opalpass
```

- `OPAL_ADMINISTRATOR_PASSWORD`: Required on first start
- DB values consumed by both MySQL and Opal

---

## Step 2: Docker Compose (1/2)

```yaml
version: "3.9"

services:
  opal:
    image: obiba/opal:latest
    depends_on: [rock, mongo, mysqldata]
    environment:
      - OPAL_ADMINISTRATOR_PASSWORD=${OPAL_ADMINISTRATOR_PASSWORD}
      - MONGO_HOST=mongo
      - MONGO_PORT=27017
      - MYSQLDATA_HOST=mysqldata
      - MYSQLDATA_DATABASE=${MYSQLDATA_DATABASE}
      - MYSQLDATA_USER=${MYSQLDATA_USER}
      - MYSQLDATA_PASSWORD=${MYSQLDATA_PASSWORD}
      - ROCK_HOSTS=rock:8085
      - APP_URL=https://localhost
      - CSRF_ALLOWED=localhost,127.0.0.1
    volumes:
      - opal_srv:/srv
    networks:
      - opalnet
```

---

## Step 2: Docker Compose (2/2)

```yaml
  rock:
    image: obiba/rock:latest
    networks: [opalnet]

  mongo:
    image: mongo:6.0
    command: ["mongod", "--bind_ip_all"]
    volumes: [mongo_data:/data/db]
    networks: [opalnet]

  mysqldata:
    image: mysql:8
    environment:
      - MYSQL_DATABASE=${MYSQLDATA_DATABASE}
      - MYSQL_USER=${MYSQLDATA_USER}
      - MYSQL_PASSWORD=${MYSQLDATA_PASSWORD}
      - MYSQL_RANDOM_ROOT_PASSWORD=yes
    volumes: [mysql_data:/var/lib/mysql]
    networks: [opalnet]
```

---

## Step 2: Docker Compose (3/3)

```yaml
  nginx:
    image: nginx:alpine
    depends_on: [opal]
    ports: ["80:80", "443:443"]
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/certs:/etc/nginx/certs:ro
    networks: [opalnet]

volumes:
  opal_srv:
  mysql_data:
  mongo_data:

networks:
  opalnet:
```

---

## Step 3: Nginx Configuration (1/2)

```nginx
upstream opal_upstream {
  server opal:8080;
  keepalive 16;
}

server {
  listen 80;
  server_name localhost 127.0.0.1;
  return 301 https://$host$request_uri;
}
```

---

## Step 3: Nginx Configuration (2/2)

```nginx
server {
  listen 443 ssl http2;
  server_name localhost 127.0.0.1;

  ssl_certificate     /etc/nginx/certs/localhost.crt;
  ssl_certificate_key /etc/nginx/certs/localhost.key;
  ssl_protocols TLSv1.2 TLSv1.3;
  ssl_ciphers HIGH:!aNULL:!MD5;
  
  add_header Strict-Transport-Security "max-age=31536000" always;
  client_max_body_size 200m;

  location / {
    proxy_pass http://opal_upstream;
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto https;
  }
}
```

---

## Step 4: Generate Self-Signed Certificate

```bash
mkdir -p nginx/certs

# Generate certificate and key
openssl req -x509 -nodes -newkey rsa:4096 -days 365 \
  -keyout nginx/certs/localhost.key \
  -out nginx/certs/localhost.crt \
  -subj "/CN=localhost"

# Optional: stronger DH parameters
openssl dhparam -out nginx/certs/dhparam.pem 2048
```

**Alternative**: Use `mkcert` for locally trusted certificates

---

## Step 5: Deploy the Stack

```bash
# Start all services
docker compose up -d

# Check status
docker compose ps

# Monitor Opal logs
docker compose logs -f opal
```

**First start**: May take a minute while images are pulled

**Access**: Open `https://localhost` and accept certificate warning

**Login**: User `administrator` + password from `.env`

---

## Step 6: Test DataSHIELD Connection

```r
# Install required packages
# install.packages(c("DSI", "DSOpal"))
library(DSI)
library(DSOpal)

# Set password (for convenience)
Sys.setenv(OPAL_PWD = "ChangeMe123!")

# Build login configuration
b <- DSI::newDSLoginBuilder()
b$append(
  server   = "local",
  url      = "https://localhost", 
  user     = "administrator",
  password = Sys.getenv("OPAL_PWD"),
  driver   = "Opal",
  options  = list(ssl_verifyhost = 0, ssl_verifypeer = 0)
)
```

---

## Step 6: Test Connection (cont.)

```r
# Connect and test
logins <- b$build()
conns <- DSI::datashield.login(logins)

# Verify connection
DSI::datashield.pkg_status(conns)  # List packages
DSI::datashield.symbols(conns)     # List symbols (empty initially)

# Clean up
DSI::datashield.logout(conns)
```

**Note**: `ssl_verify*` options disabled for self-signed cert testing only!

---

## Troubleshooting

**Opal not reachable**
- Check nginx logs: `docker compose logs nginx`
- Ensure port 443 not in use locally

**502/504 errors at Nginx**
- Verify opal container running: `docker compose ps`
- Check opal logs: `docker compose logs opal`

**Login fails**
- Ensure `OPAL_ADMINISTRATOR_PASSWORD` set at first start
- Reset: stop containers, remove `opal_srv` volume, restart

**MongoDB issues**
- Use `mongo:6.0` (Opal compatibility requirement)

---

## Key Configuration Points

**Environment Variables**
- `APP_URL=https://localhost` ‚Üí correct public links
- `CSRF_ALLOWED=localhost,127.0.0.1` ‚Üí local UI/API calls
- `ROCK_HOSTS=rock:8085` ‚Üí R server connection

**Security Notes**
- Self-signed cert for local development only
- Don't disable TLS verification in production
- Use proper certificates for live deployments

**Persistence**
- Named volumes preserve data across restarts
- Remove volumes to reset completely

---

## Next Steps

**For Production Deployment**
- Replace self-signed cert with Let's Encrypt
- Add proper DNS configuration  
- Implement security hardening
- Configure firewall rules
- Set up monitoring and backups

**For Development**
- Install additional DataSHIELD packages in Rock
- Import datasets into Opal
- Test DataSHIELD analysis workflows
- Develop custom DataSHIELD functions

---

## Summary

‚úÖ **Achieved**: Local DataSHIELD stack with Docker Compose

‚úÖ **Benefits**: 
- Quick setup and iteration
- Safe development environment  
- Production-ready foundation
- Complete DataSHIELD functionality

‚úÖ **Ready for**: Package development, testing, and learning DataSHIELD

**Next session**: Going live with DNS and Let's Encrypt!